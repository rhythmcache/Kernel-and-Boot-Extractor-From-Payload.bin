#!/bin/bash

# Display PAYLOAD_DUMPER Header
echo "  ___                    ___           _              _ "
echo " |   \ _  _ _ __  _ __  | _ \__ _ _  _| |___  __ _ __| |"
echo " | |) | || | '  \| '_ \ |  _/ _` | || | / _ \/ _` / _` |"
echo " |___/ \_,_|_|_|_| .__/ |_| \__,_|\_, |_\___/\__,_\__,_|"
echo "                 |_|              |__/                   "

# Check for required dependencies
echo "Checking for required dependencies..."

# Function to install Python packages
install_python_package() {
    package=$1
    python -m pip install $package
    if [ $? -ne 0 ]; then
        echo "Failed to install $package. Installing openssl-tool and retrying..."
        pkg install openssl-tool -y
        python -m pip install $package
    fi
}

# Check if python is installed, if not install it
if ! command -v python &> /dev/null; then
    echo "Python not found. Installing..."
    pkg install python -y
fi

# Upgrade pip
pip install --upgrade pip

# Install required Python packages
install_python_package "protobuf==5.27.3"
install_python_package "six==1.16.0"
install_python_package "bsdiff4==1.1.5"
install_python_package "brotli==1.1.0"

# Prompt the user for the ROM zip file path or payload.bin path
echo "Please enter the full path to the ROM zip file or payload.bin file (e.g., /path/to/rom.zip or /path/to/payload.bin):"
read file_path

# Create extraction directory
extraction_dir="/sdcard/Extracted"
mkdir -p "$extraction_dir"

# Check if the provided file is a zip file or payload.bin
if [[ "$file_path" == *.zip ]]; then
    echo "Unzipping ROM file..."
    unzip "$file_path" -d "$extraction_dir/"
    payload_file="$extraction_dir/payload.bin"
elif [[ "$file_path" == *payload.bin ]]; then
    echo "Payload.bin file detected. Skipping unzipping process..."
    payload_file="$file_path"
else
    echo "Invalid file type. Please provide a valid ROM zip file or payload.bin."
    exit 1
fi

# Copy Python scripts to extraction directory
cp ./payload_dumper.py "$extraction_dir"
cp ./update_metadata_pb2.py "$extraction_dir"

# Extract payload.bin using the payload dumper script
cd "$extraction_dir" || exit
python payload_dumper.py "$payload_file"

# Create the script to trigger the payload_dump from $PREFIX/bin
dump_payload_script="$PREFIX/bin/dump_payload"
cat > "$dump_payload_script" << 'EOF'
#!/bin/bash
if [ ! -f "$PREFIX/bin/payload_dump" ]; then
    pkg install git -y
    git clone https://github.com/rhythmcache/termux-payload-dumper
    cd termux-payload-dumper || exit
    chmod +x ./payload_dump
    ./payload_dump
else
    "$PREFIX/bin/payload_dump"
fi
EOF

# Make the dump_payload script executable
chmod +x "$dump_payload_script"

# Final message
echo "The script has been executed successfully!"
echo "Your extracted files are in the folder: $extraction_dir"
